{"meta":{"title":"Echor","subtitle":"~~~","description":"description","author":"Echor","url":"https://rebiocoder.github.io","root":"/"},"pages":[{"title":"Repositories","date":"2021-01-04T12:57:48.911Z","updated":"2021-01-04T12:57:48.911Z","comments":false,"path":"repository/index.html","permalink":"https://rebiocoder.github.io/repository/index.html","excerpt":"","text":""},{"title":"关于","date":"2021-01-04T13:36:17.221Z","updated":"2021-01-04T13:36:17.221Z","comments":false,"path":"about/index.html","permalink":"https://rebiocoder.github.io/about/index.html","excerpt":"","text":""},{"title":"404 Not Found：该页无法显示","date":"2021-01-04T13:01:18.513Z","updated":"2021-01-04T13:01:18.513Z","comments":false,"path":"/404.html","permalink":"https://rebiocoder.github.io/404.html","excerpt":"","text":""},{"title":"书单","date":"2021-01-04T13:01:23.501Z","updated":"2021-01-04T13:01:23.501Z","comments":false,"path":"books/index.html","permalink":"https://rebiocoder.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-01-04T13:01:28.601Z","updated":"2021-01-04T13:01:28.601Z","comments":false,"path":"categories/index.html","permalink":"https://rebiocoder.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-01-04T13:01:34.761Z","updated":"2021-01-04T13:01:34.761Z","comments":false,"path":"tags/index.html","permalink":"https://rebiocoder.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"微服务设计阅读学习","slug":"微服务设计阅读学习","date":"2021-01-04T14:09:00.000Z","updated":"2021-01-04T14:11:26.166Z","comments":true,"path":"2021/01/04/微服务设计阅读学习/","link":"","permalink":"https://rebiocoder.github.io/2021/01/04/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E9%98%85%E8%AF%BB%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"微服务的概念网上都有，各种博客都有解释。但是自己没有上手写代码，没有做工程项目，实际上是很难体会的。 微服务与SOA（面向服务的架构）的区别主要在于微服务中每个服务是一个独立的进程，它能够被独立的部署。若该服务宕机，并不影响整个系统中其他服务的正常运行。 在开始尝试做一个新的系统时，若常用微服务的方式，则需要使用限界上下文划分微服务边界。限界上下文指的是一个由显式边界限定的特定职责。如果你想要从一个限界上下文中获取信息，或者向其发起请求，需要使用模型和它的显式边界进行通信。实际上寻找限界上下文边界就是将整个业务逻辑进行一个粗粒度的划分。对于一个新系统而言，过早划分很容易错误判断服务之间的边界，按照书中内容所说，很多时候，将一个已有的代码库划分成微服务，要比从头开始构建微服务简单得多。 当你在思考组织内的限界上下文时，不应该从共享数据的角度来考虑，而应该从这些上下文能够提供的功能来考虑。服务与服务之间如果能够做到低耦合，高内聚，那么这就是一个好的微服务系统。实际上，要做到低耦合，高内聚还是很困难的，在工程项目中很可能遇到一份代码需要多次拷贝使用，当遇到这种情况时，就需要注意DRY（don’t repeat yourself）。应该考虑使用更好的设计模式来避免这种情况，因为很容易出现，一个地方被修改了，但是另一个地方忘记修改的情况。 服务集成是微服务相关技术中最重要的一个问题，按照作者的话来说：做得好的话，你的微服务可以保持自治性，你也可以独立地修改和发布它们；但做得不好的话会带来灾难。在选择集成方式时，需要注意以下几个原则：1.避免破坏性修改 2. 保证API的技术无关系3.使你的服务易于消费方使用4.隐藏内部实现细节。服务之间的通信可以分为同步和异步两种：如果使用同步通信，发起一个远程服务调用后，调用方会阻塞自己并等待整个操作的完成。如果使用异步通信，调用方不需要等待操作完成就可以返回，甚至可能不需要关心这个操作完成与否。这两种不同的通信模式有着各自的协作风格，即请求/响应或者基于事件。对于请求/响应来说，客户端发起一个请求，然后等待响应。这种模式能够与同步通信模式很好地匹配，但异步通信也可以使用这种模式。我可以发起一个请求，然后注册一个回调，当服务端操作结束之后，会调用该回调。对于使用基于事件的协作方式来说，情况会颠倒过来。客户端不是发起请求，而是发布一个事件，然后期待其他的协作者接收到该消息，并且知道该怎么做。 服务与服务之间常见有两种常见的架构风格：编排与协同。 对于上图用户注册这样一个业务逻辑，如果用编排的风格来设计服务，我们可以得到如下的架构图： 很显然，若编排的架构使用的是同步通信的机制，即请求/响应的协作方式，那么我们能够得到每一个服务返回的结果。当然，编排的架构也能使用基于回调的异步通信。编排架构的缺点在于，客户服务承担了太多的职责，而剩下的三个服务按作者的话来说：会成为贫血的CRUD服务。 如果采用协同的架构风格，我们可以得到下面这个架构图： 可以仅仅从客户服务中使用异步的方式触发一个事件，该事件名可以叫作“客户创建”。电子邮件服务、邮政服务及积分账户可以简单地订阅这些事件并且做相应处理，如上图所示，这种方法能够显著地消除耦合。使用协同的方式组织服务，很显然必定是异步的。使用这种发布-订阅的模式，是当前非常流行的一种通信模式，典型的就是消息队列，比如RabbitMQ。这种模式能够很大程度的在服务之间进行解耦，但是它的一个问题在于无法检测服务是否成功执行，比如电子邮件服务出现问题，无法发送邮件，此时整个系统是否能够检测到该问题，并进行处理。一个常见的解决方案是构建一个与业务逻辑流程图相匹配的监控系统。实际的监控活动是针对每个服务的，但最终需要把监控的结果映射到业务流程中。针对请求响应的协同方式，常用有两种技术：RPC和REST（表征性状态转移）风格的HTTP。针对基于事件的协同方式，一般采用消息队列来实现。 微服务的部署相对于单体应用来说，也是一个较为复杂的问题。CI/CD（持续集成/持续部署）是当前非常重要的一种思想。按照书中所说，判断你的项目是否CI，可以通过回答一下几个问题来判断：1.你是否每天签入代码到主线？2.你是否有一组测试来验证修改？3.当构建失败后，团队是否把修复CI当作第一优先级的事情来做？我个人感觉CI/CD应该是用来解决开发和运维之间的矛盾，应该需要一个DevOps系统来实现这种思想。","categories":[{"name":"架构设计","slug":"架构设计","permalink":"https://rebiocoder.github.io/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"}],"tags":[],"author":"Echor"},{"title":"unix环境高级编程：高级I/O理解","slug":"unix环境高级编程：高级I-O理解","date":"2021-01-04T13:58:00.000Z","updated":"2021-01-04T14:02:25.397Z","comments":true,"path":"2021/01/04/unix环境高级编程：高级I-O理解/","link":"","permalink":"https://rebiocoder.github.io/2021/01/04/unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%EF%BC%9A%E9%AB%98%E7%BA%A7I-O%E7%90%86%E8%A7%A3/","excerpt":"","text":"在网络通信中，数据的传输大部分基于socket（socket位于TCP/UDP与HTTP协议之间，当然socket也可以利用SOCK_RAW套接字提供一个数据报接口，用于直接访问下面的网络层，当使用SOCKT_RAW套接字时，应用程序应该构造自己的协议头部）。在unix系统中，将socket的操作抽象为文件的读，写，异常，即一个socket对象可以对应为一个文件描述符(fd)。所以网络I/O与磁盘读写O/I可以属于同一层次上要考虑的问题。 在考虑具体问题之前，首先要明确一个概念，阻塞与非阻塞是对于进程而言：当一个进程想要read一个文件描述符(fd)时，若fd的读缓冲区没有数据，此时进程将会阻塞，直到缓冲区中有数据可以使用，此时进程才会继续向下运行，这种情况便是阻塞I/O。对非阻塞I/O而言，当fd的读缓冲区中没有数据时，进程并不会阻塞在此处，而是立即返回错误，表示该操作如继续执行将会阻塞。下图是一个非阻塞I/O的例子(a.out) 执行以下代码： ./a.out &lt; /etc/services 2&gt;stderr.out 可以得到如下结果： 其中35对应的是EAGAIN信号，显然一次输出到终端的数据是有限的，当数据不能write到终端时，进程并没有阻塞，而是返回信号EAGAIN,表明当前写缓冲区已满， 以上代码便是一种轮询操作。 考虑如下一种场景：当该进程必须要从两个或多个fd中同时读取数据时，在这种情况下，我们不能将进程阻塞在任何一个fd的read方法上，原因是，另一个fd可能已经准备好read了，但进程阻塞，无法对其进行任何操作。为了能够使进程同时处理多个fd，我们的第一个想是fork子进程，或者用多线程同时阻塞处理。但这在实现上较为繁琐，且占用资源。另外，也可以用轮询的方法来遍历fd的状态。第三种方法是用异步I/O：进程告诉内核，当fd准备好可以进行I/O时，用一个信号通知进程，这种方法存在的问题在于：每个进程只能有一个信号，如果信号对多个fd都起作用，那么进程在收到该信号时，无法判断是哪个fd准备就绪。以上三种方法或多或少都有问题，我们主要考虑I/O多路转接技术。I/O多路转接技术想要实现的作用是：将想监听的fd加入一个列表，用某个函数来监听这个列表，当列表中有fd准备就绪时，返回准备就绪的fd给进程使用。select函数和poll函数便是实现该功能。select函数如下： 传给select的参数告诉内核： 我们所关心的描述符 对于每个描述符，我们所关心的条件 愿意等待多长时间 select将会返回： 已经准备好的描述符的总数量 对于读，写，异常，哪些描述符已经准备好了。 该函数返回的fd一定是准备就绪的，调用对应的read,write函数一定不会发生阻塞。select函数的具体实现过程： 12345678910111. 从用户态copy fd_set到内核空间2. 注册回调函数pollwait（将进程挂到每个socket的等待队列中，当socket准备好后（执行mask状态码进行判断，再唤醒进程））3. 内核遍历fd，调用每一个fd的poll方法，返回socket的mask状态掩码，即现在准备好了没有，给fd_set赋值4.当无可读写mask码时，select睡眠（On Linux, select() modifies timeout to reflect the amount of time not slept），等睡眠时间到，再次醒来轮询fd_set（内核态轮询）5. 有值时返回fd_set，将其copy到用户空间6. 用户进程变为运行态，循环fd_set，得到准备好的fd。 内核创建一个epoll对象，epoll_ctl函数向epoll对象中添加需要监听的fd，当fd准备就绪时，中断程序会操作epoll对象，而不是操作进程。当进程执行到epoll_wait时，如果就绪列表存在已经准备好的fd，进程将会被唤醒。 epoll的作用是提升事件循环查询“io事件”的效率，他允许用户进程同时监听多个文件描述符的io事件即io多路复用。同时epoll在实现上是十分高效的，相对于poll/select，epoll使得进程可以监控更多的文件描述符。epoll采用注册机制，在内核中保存用户关注的文件描述符（红黑树保存），不像select一样每次都需要传入所有的文件描述符，效率更高(减少了从用户空间向内核空间的拷贝)。epoll不像select一样会在内核中轮询所有的文件描述符（低效的），epoll会在不同文件描述符对应的设备的等待队列中添加一个回调函数，在回掉函数中将对应的文件描述符添加至epoll的rdlist队列（高效的），当进程调用epoll_wait时，内核检查该队列是否为空，如果是空则阻塞进程，如果不为空则将该队列拷贝至用户空间，并返回该函数。epoll的两种触发模式： 1.水平触发：只要fd仍然可读或写，每次调用epoll_wait都会返回该文件描述符； 2.边缘触发：只fd仍然可读或写，每次调用epoll_wait只会返回一次该文件描述符； 注意异步I/O与非阻塞I/O的区别，异步I/O，需要用回调函数来处理，fd准备好之后的情况，比较复杂。而非阻塞则是在fd的read，write操作时，一定可以立即得到结果，不会阻塞进程。","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://rebiocoder.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"unix","slug":"unix","permalink":"https://rebiocoder.github.io/tags/unix/"}],"author":"Echor"}],"categories":[{"name":"架构设计","slug":"架构设计","permalink":"https://rebiocoder.github.io/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"},{"name":"操作系统","slug":"操作系统","permalink":"https://rebiocoder.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"unix","slug":"unix","permalink":"https://rebiocoder.github.io/tags/unix/"}]}