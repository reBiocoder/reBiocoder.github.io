{"meta":{"title":"Echor","subtitle":"~~~","description":"description","author":"Echor","url":"https://rebiocoder.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2021-01-04T13:01:18.513Z","updated":"2021-01-04T13:01:18.513Z","comments":false,"path":"/404.html","permalink":"https://rebiocoder.github.io/404.html","excerpt":"","text":""},{"title":"关于","date":"2021-01-04T13:36:17.221Z","updated":"2021-01-04T13:36:17.221Z","comments":false,"path":"about/index.html","permalink":"https://rebiocoder.github.io/about/index.html","excerpt":"","text":""},{"title":"书单","date":"2021-01-04T13:01:23.501Z","updated":"2021-01-04T13:01:23.501Z","comments":false,"path":"books/index.html","permalink":"https://rebiocoder.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-01-04T13:01:28.601Z","updated":"2021-01-04T13:01:28.601Z","comments":false,"path":"categories/index.html","permalink":"https://rebiocoder.github.io/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-01-04T12:57:48.911Z","updated":"2021-01-04T12:57:48.911Z","comments":false,"path":"repository/index.html","permalink":"https://rebiocoder.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-01-04T13:01:34.761Z","updated":"2021-01-04T13:01:34.761Z","comments":false,"path":"tags/index.html","permalink":"https://rebiocoder.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"tornado后端session用户认证鉴权解决方案","slug":"tornado后端session用户认证鉴权解决方案","date":"2021-01-05T02:39:00.000Z","updated":"2021-01-05T02:41:37.713Z","comments":true,"path":"2021/01/05/tornado后端session用户认证鉴权解决方案/","link":"","permalink":"https://rebiocoder.github.io/2021/01/05/tornado%E5%90%8E%E7%AB%AFsession%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E9%89%B4%E6%9D%83%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","excerpt":"","text":"tornado框架自身没有集成session鉴权，但是对cookie支持良好。由于现在前端vue部署在一个端口上，后端tornado分布式应用部署在多个端口上，这就会导致浏览器的跨域问题产生（url不同，即协议，域名，端口三者有不相同的地方）。 在前后端分离的项目中，由于页面的路由跳转由vue控制，后端应用只提供数据。这样就会使鉴权任务变得较为复杂。一个比较良好的解决思路是，在前端需要鉴权才能访问的路由中添加一个后端异步请求，该请求用来判断用户是否登录，这样来判断用户当前是否有权限访问该页面。同时，后端需要 登录才能访问的接口，用修饰器来判断用户当前是否登录。下面提供一种tornado实现session的解决方案。在新建一个HTTP请求时，需要初始化一个session类，该类应该实现以下功能： 能够从请求头的cookie中得到session_id； 能够生成一个全新的session_id，并将其返回给client； 若server得到的session_id失效，则清空client的cookie； 若server得到的sess_id有效，则从redis中取出对应的用户信息 在一个HTTP请求结束时，需要判断，当前这个链接是否为”登录成功“的API，如果是，则需要将对应的用户信息存储到redis中，并生成一个新的session_id返回给用户。 代码如下：BaseHandler 1234567891011121314151617181920212223242526272829303132class BaseHandler(web.RequestHandler): def initialize(self): self.session_save_tag &#x3D; False self.session &#x3D; None async def prepare(self): await self.init_session() if get_config().session[&#39;session_key_name&#39;] in self.session: self.current_user &#x3D; LoginUser(self.session[get_config().session[&#39;session_key_name&#39;]]) def on_finish(self): if self.session is not None and self.session_save_tag: get_loop().add_callback(self.session.save) get_logger().info(&quot;[一次HTTP请求结束]&quot;) async def init_session(self): if not self.session: self.session &#x3D; Session(self) await self.session.init_fetch() def save_session(self): self.session_save_tag &#x3D; True self.session.generate_session_id() get_logger().info(&quot;【登录】生成session_id结束&quot;) def save_login_user(self, user: dict): login_user &#x3D; LoginUser(None) login_user[&#39;username&#39;] &#x3D; user.get(&quot;username&quot;, &quot;&quot;) login_user[&#39;email&#39;] &#x3D; user.get(&quot;email&quot;, &quot;&quot;) login_user[&#39;phone&#39;] &#x3D; user.get(&quot;phone&quot;, &quot;&quot;) self.session[get_config().session[&#39;session_key_name&#39;]] &#x3D; login_user self.current_user &#x3D; login_user self.save_session() login API 123456789101112131415class LoginHandler(BaseHandler): async def post(self): try: username &#x3D; self.data[&#39;username&#39;] password &#x3D; self.data[&#39;password&#39;] doc_user &#x3D; await get_one_data(self.mongodb_manager, Config.mongodb_config[&#39;user_info&#39;], &#123;&#39;username&#39;: username&#125;) print(doc_user) if doc_user is not None and password &#x3D;&#x3D; doc_user[&#39;password&#39;]: self.save_login_user(doc_user) get_logger().info(&quot;登录成功,用户信息已经保存&quot;) except Exception as e: error &#x3D; traceback.format_exc() get_logger().error(&quot;login fail[&#123;&#125;]:&#123;&#125;&quot;.format(e, error))","categories":[{"name":"架构设计","slug":"架构设计","permalink":"https://rebiocoder.github.io/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"}],"tags":[{"name":"tornado","slug":"tornado","permalink":"https://rebiocoder.github.io/tags/tornado/"}],"author":"Echor"},{"title":"微服务设计阅读学习","slug":"微服务设计阅读学习","date":"2021-01-04T14:09:00.000Z","updated":"2021-01-04T14:11:26.166Z","comments":true,"path":"2021/01/04/微服务设计阅读学习/","link":"","permalink":"https://rebiocoder.github.io/2021/01/04/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E9%98%85%E8%AF%BB%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"微服务的概念网上都有，各种博客都有解释。但是自己没有上手写代码，没有做工程项目，实际上是很难体会的。 微服务与SOA（面向服务的架构）的区别主要在于微服务中每个服务是一个独立的进程，它能够被独立的部署。若该服务宕机，并不影响整个系统中其他服务的正常运行。 在开始尝试做一个新的系统时，若常用微服务的方式，则需要使用限界上下文划分微服务边界。限界上下文指的是一个由显式边界限定的特定职责。如果你想要从一个限界上下文中获取信息，或者向其发起请求，需要使用模型和它的显式边界进行通信。实际上寻找限界上下文边界就是将整个业务逻辑进行一个粗粒度的划分。对于一个新系统而言，过早划分很容易错误判断服务之间的边界，按照书中内容所说，很多时候，将一个已有的代码库划分成微服务，要比从头开始构建微服务简单得多。 当你在思考组织内的限界上下文时，不应该从共享数据的角度来考虑，而应该从这些上下文能够提供的功能来考虑。服务与服务之间如果能够做到低耦合，高内聚，那么这就是一个好的微服务系统。实际上，要做到低耦合，高内聚还是很困难的，在工程项目中很可能遇到一份代码需要多次拷贝使用，当遇到这种情况时，就需要注意DRY（don’t repeat yourself）。应该考虑使用更好的设计模式来避免这种情况，因为很容易出现，一个地方被修改了，但是另一个地方忘记修改的情况。 服务集成是微服务相关技术中最重要的一个问题，按照作者的话来说：做得好的话，你的微服务可以保持自治性，你也可以独立地修改和发布它们；但做得不好的话会带来灾难。在选择集成方式时，需要注意以下几个原则：1.避免破坏性修改 2. 保证API的技术无关系3.使你的服务易于消费方使用4.隐藏内部实现细节。服务之间的通信可以分为同步和异步两种：如果使用同步通信，发起一个远程服务调用后，调用方会阻塞自己并等待整个操作的完成。如果使用异步通信，调用方不需要等待操作完成就可以返回，甚至可能不需要关心这个操作完成与否。这两种不同的通信模式有着各自的协作风格，即请求/响应或者基于事件。对于请求/响应来说，客户端发起一个请求，然后等待响应。这种模式能够与同步通信模式很好地匹配，但异步通信也可以使用这种模式。我可以发起一个请求，然后注册一个回调，当服务端操作结束之后，会调用该回调。对于使用基于事件的协作方式来说，情况会颠倒过来。客户端不是发起请求，而是发布一个事件，然后期待其他的协作者接收到该消息，并且知道该怎么做。 服务与服务之间常见有两种常见的架构风格：编排与协同。 对于上图用户注册这样一个业务逻辑，如果用编排的风格来设计服务，我们可以得到如下的架构图： 很显然，若编排的架构使用的是同步通信的机制，即请求/响应的协作方式，那么我们能够得到每一个服务返回的结果。当然，编排的架构也能使用基于回调的异步通信。编排架构的缺点在于，客户服务承担了太多的职责，而剩下的三个服务按作者的话来说：会成为贫血的CRUD服务。 如果采用协同的架构风格，我们可以得到下面这个架构图： 可以仅仅从客户服务中使用异步的方式触发一个事件，该事件名可以叫作“客户创建”。电子邮件服务、邮政服务及积分账户可以简单地订阅这些事件并且做相应处理，如上图所示，这种方法能够显著地消除耦合。使用协同的方式组织服务，很显然必定是异步的。使用这种发布-订阅的模式，是当前非常流行的一种通信模式，典型的就是消息队列，比如RabbitMQ。这种模式能够很大程度的在服务之间进行解耦，但是它的一个问题在于无法检测服务是否成功执行，比如电子邮件服务出现问题，无法发送邮件，此时整个系统是否能够检测到该问题，并进行处理。一个常见的解决方案是构建一个与业务逻辑流程图相匹配的监控系统。实际的监控活动是针对每个服务的，但最终需要把监控的结果映射到业务流程中。针对请求响应的协同方式，常用有两种技术：RPC和REST（表征性状态转移）风格的HTTP。针对基于事件的协同方式，一般采用消息队列来实现。 微服务的部署相对于单体应用来说，也是一个较为复杂的问题。CI/CD（持续集成/持续部署）是当前非常重要的一种思想。按照书中所说，判断你的项目是否CI，可以通过回答一下几个问题来判断：1.你是否每天签入代码到主线？2.你是否有一组测试来验证修改？3.当构建失败后，团队是否把修复CI当作第一优先级的事情来做？我个人感觉CI/CD应该是用来解决开发和运维之间的矛盾，应该需要一个DevOps系统来实现这种思想。","categories":[{"name":"架构设计","slug":"架构设计","permalink":"https://rebiocoder.github.io/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"}],"tags":[],"author":"Echor"},{"title":"unix环境高级编程：高级I/O理解","slug":"unix环境高级编程：高级I-O理解","date":"2021-01-04T13:58:00.000Z","updated":"2021-01-04T14:02:25.397Z","comments":true,"path":"2021/01/04/unix环境高级编程：高级I-O理解/","link":"","permalink":"https://rebiocoder.github.io/2021/01/04/unix%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%EF%BC%9A%E9%AB%98%E7%BA%A7I-O%E7%90%86%E8%A7%A3/","excerpt":"","text":"在网络通信中，数据的传输大部分基于socket（socket位于TCP/UDP与HTTP协议之间，当然socket也可以利用SOCK_RAW套接字提供一个数据报接口，用于直接访问下面的网络层，当使用SOCKT_RAW套接字时，应用程序应该构造自己的协议头部）。在unix系统中，将socket的操作抽象为文件的读，写，异常，即一个socket对象可以对应为一个文件描述符(fd)。所以网络I/O与磁盘读写O/I可以属于同一层次上要考虑的问题。 在考虑具体问题之前，首先要明确一个概念，阻塞与非阻塞是对于进程而言：当一个进程想要read一个文件描述符(fd)时，若fd的读缓冲区没有数据，此时进程将会阻塞，直到缓冲区中有数据可以使用，此时进程才会继续向下运行，这种情况便是阻塞I/O。对非阻塞I/O而言，当fd的读缓冲区中没有数据时，进程并不会阻塞在此处，而是立即返回错误，表示该操作如继续执行将会阻塞。下图是一个非阻塞I/O的例子(a.out) 执行以下代码： ./a.out &lt; /etc/services 2&gt;stderr.out 可以得到如下结果： 其中35对应的是EAGAIN信号，显然一次输出到终端的数据是有限的，当数据不能write到终端时，进程并没有阻塞，而是返回信号EAGAIN,表明当前写缓冲区已满， 以上代码便是一种轮询操作。 考虑如下一种场景：当该进程必须要从两个或多个fd中同时读取数据时，在这种情况下，我们不能将进程阻塞在任何一个fd的read方法上，原因是，另一个fd可能已经准备好read了，但进程阻塞，无法对其进行任何操作。为了能够使进程同时处理多个fd，我们的第一个想是fork子进程，或者用多线程同时阻塞处理。但这在实现上较为繁琐，且占用资源。另外，也可以用轮询的方法来遍历fd的状态。第三种方法是用异步I/O：进程告诉内核，当fd准备好可以进行I/O时，用一个信号通知进程，这种方法存在的问题在于：每个进程只能有一个信号，如果信号对多个fd都起作用，那么进程在收到该信号时，无法判断是哪个fd准备就绪。以上三种方法或多或少都有问题，我们主要考虑I/O多路转接技术。I/O多路转接技术想要实现的作用是：将想监听的fd加入一个列表，用某个函数来监听这个列表，当列表中有fd准备就绪时，返回准备就绪的fd给进程使用。select函数和poll函数便是实现该功能。select函数如下： 传给select的参数告诉内核： 我们所关心的描述符 对于每个描述符，我们所关心的条件 愿意等待多长时间 select将会返回： 已经准备好的描述符的总数量 对于读，写，异常，哪些描述符已经准备好了。 该函数返回的fd一定是准备就绪的，调用对应的read,write函数一定不会发生阻塞。select函数的具体实现过程： 12345678910111. 从用户态copy fd_set到内核空间2. 注册回调函数pollwait（将进程挂到每个socket的等待队列中，当socket准备好后（执行mask状态码进行判断，再唤醒进程））3. 内核遍历fd，调用每一个fd的poll方法，返回socket的mask状态掩码，即现在准备好了没有，给fd_set赋值4.当无可读写mask码时，select睡眠（On Linux, select() modifies timeout to reflect the amount of time not slept），等睡眠时间到，再次醒来轮询fd_set（内核态轮询）5. 有值时返回fd_set，将其copy到用户空间6. 用户进程变为运行态，循环fd_set，得到准备好的fd。 内核创建一个epoll对象，epoll_ctl函数向epoll对象中添加需要监听的fd，当fd准备就绪时，中断程序会操作epoll对象，而不是操作进程。当进程执行到epoll_wait时，如果就绪列表存在已经准备好的fd，进程将会被唤醒。 epoll的作用是提升事件循环查询“io事件”的效率，他允许用户进程同时监听多个文件描述符的io事件即io多路复用。同时epoll在实现上是十分高效的，相对于poll/select，epoll使得进程可以监控更多的文件描述符。epoll采用注册机制，在内核中保存用户关注的文件描述符（红黑树保存），不像select一样每次都需要传入所有的文件描述符，效率更高(减少了从用户空间向内核空间的拷贝)。epoll不像select一样会在内核中轮询所有的文件描述符（低效的），epoll会在不同文件描述符对应的设备的等待队列中添加一个回调函数，在回掉函数中将对应的文件描述符添加至epoll的rdlist队列（高效的），当进程调用epoll_wait时，内核检查该队列是否为空，如果是空则阻塞进程，如果不为空则将该队列拷贝至用户空间，并返回该函数。epoll的两种触发模式： 1.水平触发：只要fd仍然可读或写，每次调用epoll_wait都会返回该文件描述符； 2.边缘触发：只fd仍然可读或写，每次调用epoll_wait只会返回一次该文件描述符； 注意异步I/O与非阻塞I/O的区别，异步I/O，需要用回调函数来处理，fd准备好之后的情况，比较复杂。而非阻塞则是在fd的read，write操作时，一定可以立即得到结果，不会阻塞进程。","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://rebiocoder.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"unix","slug":"unix","permalink":"https://rebiocoder.github.io/tags/unix/"}],"author":"Echor"},{"title":"机器学习（1）","slug":"机器学习（1）","date":"2020-06-01T02:27:00.000Z","updated":"2021-01-05T03:50:46.474Z","comments":true,"path":"2020/06/01/机器学习（1）/","link":"","permalink":"https://rebiocoder.github.io/2020/06/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%881%EF%BC%89/","excerpt":"1.监督学习 回归： 预测连续值 分类：预测离散值 2.无监督学习 聚类算法 鸡尾酒算法 梯度下降","text":"1.监督学习 回归： 预测连续值 分类：预测离散值 2.无监督学习 聚类算法 鸡尾酒算法 梯度下降 1.监督学习 回归： 预测连续值 分类：预测离散值 2.无监督学习 聚类算法 鸡尾酒算法 梯度下降 ![QOLJD78`A_BYQ_DIY_DGNWG.png](https://i.loli.net/2020/06/01/ugZyM5nDhRqdTUX.png) QOLJD78`A_BYQ_DIY_DGNWG.png 正确更新方式是同时更新x1和x2 计算偏导数 3~O_PS3D6DF_JEAU5_NG6AY.png logistics 函数 ![C_CNR7D`BWNRDQI27~R_AZF.png](https://i.loli.net/2020/06/01/KG52sOlePuikzRM.png) C_CNR7D`BWNRDQI27~R_AZF.png logistics代价函数 I2_EVOY__ZBQVK_ST_KM_XR.png","categories":[],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"https://rebiocoder.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}]},{"title":"二叉树中序遍历（栈）","slug":"二叉树中序遍历（栈）","date":"2020-04-22T08:09:00.000Z","updated":"2021-01-05T03:51:00.250Z","comments":true,"path":"2020/04/22/二叉树中序遍历（栈）/","link":"","permalink":"https://rebiocoder.github.io/2020/04/22/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%88%E6%A0%88%EF%BC%89/","excerpt":"leetcode94问题：栈的方式实现二叉树 1","text":"leetcode94问题：栈的方式实现二叉树 1 leetcode94问题：栈的方式实现二叉树 12345678910111213class Solution: def middelTravel(self, r): stack, ret &#x3D; \\[\\], \\[\\] root &#x3D; r while stack or root: if root: stack.append(root) root &#x3D; root.left else: s &#x3D; stack.pop() ret.append(s.val) root &#x3D; s.right return ret 关键点：1.根节点先入栈，然后以左节点为根节点，直到左节点为空，将根节点出栈。 以右节点为根节点","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"https://rebiocoder.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"二叉树子树","slug":"二叉树子树","date":"2020-04-22T07:36:00.000Z","updated":"2021-01-05T03:51:12.762Z","comments":true,"path":"2020/04/22/二叉树子树/","link":"","permalink":"https://rebiocoder.github.io/2020/04/22/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%AD%90%E6%A0%91/","excerpt":"leetcode572问题：判断t是否为s的子树 1","text":"leetcode572问题：判断t是否为s的子树 1 leetcode572问题：判断t是否为s的子树 1234567891011python解决方案 class TreeNode: def \\_\\_init\\_\\_(self): self.val &#x3D; val self.left &#x3D; None self.right &#x3D; None class Solution: def isSubtitle(t,s): def up(t): return (t.val, up(t.left), up(t.right)) if t else None return str(up(t)) in str(up(s)) 注意点： 元组中的元素位置不会发生变化 print(“a” in “ab”) 返回true","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"https://rebiocoder.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"二叉树右视图","slug":"二叉树右视图","date":"2020-04-22T06:33:00.000Z","updated":"2021-01-05T03:51:37.986Z","comments":true,"path":"2020/04/22/二叉树右视图/","link":"","permalink":"https://rebiocoder.github.io/2020/04/22/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%B3%E8%A7%86%E5%9B%BE/","excerpt":"二叉树右视图（leetcode 199） 1","text":"二叉树右视图（leetcode 199） 12345678910111213141516class TreeNode: def \\_\\_init\\_\\_(self,x): self.val &#x3D; x self.left &#x3D; None self.right &#x3D; None class Solution: def rightDideView(self, root: TreeNode) -&gt; List\\[int\\]: d &#x3D; &#123;&#125; def f(r,i): if r: d\\[i\\] &#x3D; r.val f(r.left, i+1) f(r.right, i+1) f(root,0) return \\[\\*d.values()\\] 思路： 先序遍历，注意rightSideView(r-&gt;left, i+1)与rightSideView(r-right, i+1)中的i相同，由此可以知道，字典中存储的数据一定是每层的最后一个数据","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"https://rebiocoder.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"UML类图","slug":"UML类图","date":"2020-04-16T03:39:00.000Z","updated":"2021-01-05T03:52:39.359Z","comments":true,"path":"2020/04/16/UML类图/","link":"","permalink":"https://rebiocoder.github.io/2020/04/16/UML%E7%B1%BB%E5%9B%BE/","excerpt":"类图基本属性12<","text":"类图基本属性 123+表示public \\-表示private #表示protected 类与类的基本关系 12345678910111213141.依赖关系 定义：有两个元素x和y，如果修改x的定义可能会引起对y的定义的修改，则称y依赖与元素x，用带箭头的虚线表示依赖关系，箭头指向被依赖的对象。 2.泛化关系 泛化关系就是子类与父类之间的继承关系。用带空心箭头的实线表示，箭头指向父类 3.关联关系 关联关系可以理解为ER图中的实体关系，用实现表示，上方标识数字来进行确认。 4.聚合关系 聚合关系是一种特殊的关联关系，聚合关系表示的是类之间整体与部分的关系，用带有空心菱形的实线表示，空心菱形指向代表整体的类。 5.实现关系 定义接口，用户带空心箭头的虚线来表示","categories":[],"tags":[]},{"title":"离散结构笔记(1)","slug":"离散结构笔记-1","date":"2020-02-21T05:37:00.000Z","updated":"2021-01-05T03:54:15.464Z","comments":true,"path":"2020/02/21/离散结构笔记-1/","link":"","permalink":"https://rebiocoder.github.io/2020/02/21/%E7%A6%BB%E6%95%A3%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0-1/","excerpt":"命题: 能判断真假的陈述句称为命题 1","text":"命题: 能判断真假的陈述句称为命题 1231. 感叹句,祈使句,疑问句都不是命题 2. 悖论不是命题 3.判断结果不能唯一确定的不是命题 简单命题: 由一个简单陈述句组成(原子命题,不能再分) 复合命题: 简单命题 + 联结词 五种常用的联结词:否定,合取,析取,蕴涵,等价 否定: 非,并非 合取 合取词: “且” P 且 Q 当且仅当P和Q同时为真 12345P并且Q 不但P而且Q 既P又Q 尽管P还Q 虽然P但是Q 析取 析取词: 或 P或Q: 为假,当且仅当P和Q同时为假 分类: 相容或,排斥或 蕴涵词如果.. 那么 ..","categories":[],"tags":[]},{"title":"tornado与vue.js解决web一对一实时聊天（IM）","slug":"tornado与vue-js解决web一对一实时聊天（IM）","date":"2020-02-17T13:56:00.000Z","updated":"2021-01-05T03:55:11.288Z","comments":true,"path":"2020/02/17/tornado与vue-js解决web一对一实时聊天（IM）/","link":"","permalink":"https://rebiocoder.github.io/2020/02/17/tornado%E4%B8%8Evue-js%E8%A7%A3%E5%86%B3web%E4%B8%80%E5%AF%B9%E4%B8%80%E5%AE%9E%E6%97%B6%E8%81%8A%E5%A4%A9%EF%BC%88IM%EF%BC%89/","excerpt":"整个小项目最核心的通讯功能能够实现，效果如图：","text":"整个小项目最核心的通讯功能能够实现，效果如图： 整个小项目最核心的通讯功能能够实现，效果如图： demo图片 记录一下这个阶段遇到的一些问题。 解决方案：前端vue.js+ajax后端django rest framework + tornado用户鉴权用JWTredis做系统缓存 一.前后端鉴权问题 1.django api鉴权 django通过鉴定http请求头的Authorization头部，进行鉴权。 AZ9Y5E6OHP_HC_O0ZYNF_HS.png 当收到请求时，主要是以下方面的问题： 该token是否真实有效 该token所代表的用户是否为唯一登录 该token还有多久将会失效，若即将失效，则刷新token，同时要防止并发时，多次重复刷新 解决思路 对token发放的后端接口进行拦截，将/new_token得到的新token存入redis中，将/refresh_token得到的刷新token也存入redis中。 当得到一个带有Authorizaion请求头的请求时，首先通过decode该token，得到username和user_id（注意这里无论token是否失效都可以解码出来基本信息）,然后在redis中查询only_key，这里实际上就解决了1，2两个问题。 刷新token的问题，没有找到特别好的解决方案，采用的是，在redis中存储一个refresh_token，如果已经刷新，则不再刷新（防止重复刷新）。 2 . tornado api鉴权 tornado中没有django中中间件的概念，通过python的修饰器来进行鉴权，与django鉴权相同。 3.vue.js鉴权 采用router.beforeEach进行全局验证，需要验证的页面在meta中添加requiresAuth字段。 4.axios鉴权 新建一个api.js，create一个axios实例，在axios的拦截器中添加请求头Authorization。 所以api请求同一存放在api.js中，在组件中使用时，调用相关promise函数。由于axios是异步的，所以在long pool时，容易出现超时中断的情况。这里我不得不在vue中引入了jquery，用ajax做长轮询。（有好的解决方案也可以交流） 5.由于浏览器的限制，ajax请求容易出现cors，跨域请求失败。 在django中可以直接安装第三方组件来解决，在tornado中不行。 当请求方式为get和部分post时是不会出现cors错误的，但是当post，dataType为json时，这时为非简单请求中的一种，浏览器会自动发送一个options进行嗅探，查看server是否支持该ip的请求，在tornado中设置： 12345678910111213141516self.set\\_header(&#39;Access-Control-Allow-Origin&#39;, &#39;http:&#x2F;&#x2F;172.20.10.3:8080&#39;) self.set\\_header(&#39;Access-Control-Allow-Credentials&#39;, True) self.set\\_header(&#39;Access-Control-Allow-Headers&#39;, &#39;Origin, X-Requested-With, Content-Type, Accept, Authorization, athorization&#39;) self.set\\_header(&#39;Access-Control-Allow-Methods&#39;, &#39;POST, GET, PUT, DELETE&#39;) &#96;&#96;&#96;&#96;Access-Control-Allow-Origin&#96;中为前端ip+端口号，表示同意该ip的非简单请求。二. tornado处理实时聊天消息处理实时的信息，django自己的一套并不好用，&#96;django-channels&#96;加websocket虽然能实现简单的实时通信，但是效果并不好。tornado是一个异步web框架，处理实时消息，作为django的一个组件（这里说的并不准确，因为tornado的服务器是生产级服务器，可以直接生产部署，再加nginx反向代理，性能十分优越）。参考tornado中ajax聊天室demo（facebook工程师的demo，很值得读，编码规范也可以学习），使用redis做缓存在处理单对单的消息收发。三。django与tornado的结合部署官网文档有相关的例子，wsgi的结合部署，使用的是tornado的服务器。主要代码如下： wsgi_app = wsgi.WSGIContainer( django.core.handlers.wsgi.WSGIHandler())tornado_app = tornado.web.Application( [ (‘/api/v1/all-message/‘, ChatCacheApi.IndexMessageHandler), (‘/api/v1/new-message/‘, ChatCacheApi.NewMessageHandler), (‘/api/v1/update-message/‘, ChatCacheApi.UpdateMessageHandler), (‘.*‘, tornado.web.FallbackHandler, dict(fallback=wsgi_app)), ])server = tornado.httpserver.HTTPServer(tornado_app)server.listen(options.options.port, ‘0.0.0.0’)tornado.ioloop.IOLoop.current().start() ``` 响应时，将会使用tornado server。 主要时记录一下思路，具有实现有点麻烦，有需要再记录。","categories":[],"tags":[{"name":"python","slug":"python","permalink":"https://rebiocoder.github.io/tags/python/"},{"name":"tornado","slug":"tornado","permalink":"https://rebiocoder.github.io/tags/tornado/"}]},{"title":"2020/2/14 杂记","slug":"2020-2-14-杂记","date":"2020-02-14T10:29:00.000Z","updated":"2021-01-05T03:42:11.001Z","comments":true,"path":"2020/02/14/2020-2-14-杂记/","link":"","permalink":"https://rebiocoder.github.io/2020/02/14/2020-2-14-%E6%9D%82%E8%AE%B0/","excerpt":"有东西被加密了, 请输入密码查看.","text":"有东西被加密了, 请输入密码查看. 您好, 这里需要密码. 514a44beaa0cb7054e584d7645d94ac01066dd28f4442b1f6d2e18dde70b4649166a2497a8dd0b0dd502ccb06821c14b63726458f5ac47d6e0ae4f2fb2d6747357395b73b598a82bf58a3f87d35686e372d02fa1733e914fdee0a8df650fb84acb01ac897ed10505c16342fbf017a3cdf16fc6bd97cd09ec3551fd5a9e51ee937e32a3ed189b65ed8b85393ec05747fe510e3fde0df0d5671329c1292cab4c654c6ab06d5a476b485b07fc2e362ac7032e0c2d5d13906d3ddef8f2bc9fc8af2943f25da93b579c13e89e0ab624e3e19da03a5f5bc3660db2d9f1cd6da4dbe4cbd3650fe60a3e9aa58ab808ea7a22fc74ac14ba85987778cd6873aafe5a933f7fda9d6baed7722b6f8d4d5198f859f352775f3899bb99d1d9dfbeeafb9661418d7a0ecd73e55a80ec3919daf20d826788a92cbfcdc0981a3989f926f3e786e46db23b8a1f9e2d377286a6703898d6138710ab5e384be7c8ee6f8a59ca8a79aa51c1e64bcf2c1d47024a21477f0a80c441d09a3bb781b9fb83f46dacba40ae1c5d2186a2cd5d4e574eb6ff02728e642f7971909a8e2c8a183ab8d9b596866cfe5c359f8eb6b83dde532d6abd75a6083cabc4a3832b10c0c2bbe86f16a4b4b6efc9cf5ce1a98245e59f11ad20f159df54718215fb7459cacd9cafbfa645e38d51fb8b8fa34cdf50fee0f0f04327cfa56a21352026687b4cbca32da9535c96f0469868e304fea3243fdff616c2f29bb6c3e3cb02bb084490c17100a418d536d18dfe606165d90f4c44964a2d41cfd94833ca92db4b39ac7500a6489231d50470d5fab6c7b45f490a2e3b7859cb7beac8224c52ef72e41dd10de57ae8d38acf58cc14ac2b08d5185f6dc50dffbf5a770fda7b238c63c1522efc5a130fc23eff8ee9ae5e15380264b6ea0565ecf9c655cc3675a51c04d0c36cc6d0dc3397e0a2117454bd2ad0f8a4d9a7de5f4764bb1746318003848795815c8b522ba2f213d441127091dda279be63b8046842eb457068e36aac10c2ef7453212c0d97d0178cb1ecfa14c5dedcb86a95f24e4a7fa8109dfddefc522ccb29524c6b5ed80dfd3ed605fca72a568efb8ae4c5afa93c4979b44b5eced92a4d4c41cde62abbe7b3a74e90011210bb520ada4cec589e04553dac772b274bdcf7ef0cdd2d523d0b69b9dd9924aa2585a04e88b9d8beac5b49b90873d00093ba5cefd78cd2d1006eb679b519531a282d8384d8da0e934f74b955f2c26c6be4d3cd8a159fb5a02ca440e9bb98d8a16d7aaa0d03fb1d8ecb2c83427fb7bdad7c8566d517aad8c42ced9b5e29f914500250950754227c4ae97009fbb9ae3531ca83b3d79e0b68e7a219b2deb6f512194a60851d1f7276cb90d7aca59ff89edac946c3bc4accccb79dd9f6ac89ebb21ebf6a4313fb8a60e52417ebb2073fc5ea328fa1d0844ee2312eefe22c104434ffe02fe2080220dfca378bf589faa8bbbf3173fe07d057628fcca7673053e4db7675f42aec2333ae63a1041350cd26042e3677dc8e38b3ed28e319afeff929913fcf2c7ed8bfab8ccc7063110c846543cdfa4dead1fbe0b0a2d4f2e6797da608e0861912b47b2db0301b704af06792549204346afbd4f0f63d39732c257745c63ee3692a01b9414a59fb01e53a2c381fd98c8d956e262888a3588a6aaeef7a77b3ba469aab10dfe31cf3a888200481c97d122c1926dd017171692a07bf010f0448549397843e5cbcaeaddf5f0ec44b85fa769d8cbf28c8be7aacc2d2e60380a7ecfcfea2890d4ba693c1adacf897d8e1e73c229be85dce93fa26d9b68e160b0053aef09988694a29f054fbd844b8e5f970befe823b840c5b4c2b19ec1c0a534d0ba6a2af0eb41f53dbfeb3edd93e03c644aa94a544c0a735ab9a073e7948386fb4a0da19e6be4cdec6712c3c5ab201705d1cc9b99efda72e1cf0fbd66f1a78f249448b54c81c1f99e144398a4df75f045cd823f7d174150b224f9c4fa148b66072ca30d9601aca7a34d1db23e2d71913f589753202c2e4e9d52a758445a41407966b7bd995e94234e5f8b3468ab7011408f4de5f30f94182234477e65fc63a6d6f3b57aedf530d4e2851270f633d96111b672f07fa227a266f699dbed320a096034976413116e4d03b13d7795cf949ac4e4f6f31f6ec0b332c0ac6362af2486d0d251f187db0631135657e23368e557624d76ab6b3bc7a918a349f5c3fa55754aec5dd875b6efd116b0be8040520d7babebb753093a0031194ed306a7144aa4bc755a19a6a499c9ef6e12e5d4a2734eaf48a4153dd894387c3bff5d1e25fd34b6e9b23865961aa2fe7f27b1e718a7d8b2f0576b09268648657e1de0669518d731f7e97e8b834ff752aa8e908cbee32646d6d5f76f3616f52bf209bfbbf1fe40b182282e99b463d910c822e4e3a30aaaad1fc06cb7440be1d90daa7cc041646f3db81c721e9a2436ab745833c594adef80e3dd55ecde535af865240f41e776202dee9e8e46b542eaac0b0050ebb0ed81345f6f3d1bf348b3ee84d90035f22fef421de9f6236267107761f0f70bce9d08c1fae7001f6ee474a1616eee305d2e6e7656e6494e9da190961fc736161ba5334688fbdd842740031496ef7b58333ecb6fd8b88af098e7994060dec8d0f48260980bee1a2cd885c22fc2e630a92c058523a2ad942bec1e49d05a48a515b6a19cb2016707ed17d82aee6e58de38f3df3905da21c2cef1d94943b99e0cd679f9790e000b5d366fba5dcd202a4c58e4b20bed859c61f21bb48f159e54c7dd0a6bd09a534a09f16af95087c806ff9d5af5feeaa8fb9ce4bdd58905a016c6055d3879e6fb45804bbf858d55e6887dc8ffff9e9d98c3fc15737e72060b49aa6fa1c6a49448edee85297d06516aeec5e8bb5c35a9f27f02f7b2b20a806689d7b368658dcdaa125aad575276c496206eb58097bc17359012a3127a049f1c99c8d3dccf0c9d96266de40d3e75db97d99fa348e1039ea91d10432521f5e24a726cb3dfdfa143e85881b84b50dc74f83522f61aff251af24e759b2b5811d1bbd5beaf48b664219c4430d07055342b1fd1716bc7e35269f93c94029b04e83275b0ed720d7ead4ecbf02451409180a672727dfc0b175271f9513def46551629d5300f0a19fc42e1c0d0fa4bf3ae18e859260aaab771d404a8072e81c1948f0542dd0187d03eb72936abcd746de62ebc2e9dc4fef0ac73eaeecd78f72634749e64101056f2245f5637cae783374659ad994262c31c618e7","categories":[],"tags":[{"name":"日常生活","slug":"日常生活","permalink":"https://rebiocoder.github.io/tags/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB/"}]},{"title":"tornado聊天室demo.py源码分析","slug":"tornado聊天室demo-py源码分析","date":"2020-02-14T10:25:00.000Z","updated":"2021-01-05T03:56:28.945Z","comments":true,"path":"2020/02/14/tornado聊天室demo-py源码分析/","link":"","permalink":"https://rebiocoder.github.io/2020/02/14/tornado%E8%81%8A%E5%A4%A9%E5%AE%A4demo-py%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","excerpt":"在tornado的源码之中有facebook的工程师写的demo,结构十分的优雅,可以用来学习.这篇文章主要是来分析chatdemo.py,tornado使用长轮询的方式建立聊天室的方式.不足之处,欢迎留言讨论. chatdemo.py的文件结构如下","text":"在tornado的源码之中有facebook的工程师写的demo,结构十分的优雅,可以用来学习.这篇文章主要是来分析chatdemo.py,tornado使用长轮询的方式建立聊天室的方式.不足之处,欢迎留言讨论. chatdemo.py的文件结构如下 在tornado的源码之中有facebook的工程师写的demo,结构十分的优雅,可以用来学习.这篇文章主要是来分析chatdemo.py,tornado使用长轮询的方式建立聊天室的方式.不足之处,欢迎留言讨论. chatdemo.py的文件结构如下: 1234D:. ├─chatdemo.py ├─static └─templates 首先来看chatdemo.py中的内容. 1234567class MessageBuffer(object): def \\_\\_init\\_\\_(self): \\# cond is notified whenever the message cache is updated self.cond &#x3D; tornado.locks.Condition() self.cache &#x3D; \\[\\] self.cache\\_size &#x3D; 200 首先是创建了一个messagebuffer,一个用来缓存聊天记录的类,在析构函数中有一个self.cond,它是一个tornado.locks.Condition(),具体看一下locks.condition的内容: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566class \\_TimeoutGarbageCollector(object): &quot;&quot;&quot;Base class for objects that periodically clean up timed-out waiters. Avoids memory leak in a common pattern like: while True: yield condition.wait(short\\_timeout) print(&#39;looping....&#39;) &quot;&quot;&quot; def \\_\\_init\\_\\_(self) -&gt; None: self.\\_waiters &#x3D; collections.deque() \\# type: Deque\\[Future\\] self.\\_timeouts &#x3D; 0 def \\_garbage\\_collect(self) -&gt; None: \\# Occasionally clear timed-out waiters. self.\\_timeouts +&#x3D; 1 if self.\\_timeouts &gt; 100: self.\\_timeouts &#x3D; 0 self.\\_waiters &#x3D; collections.deque(w for w in self.\\_waiters if not w.done()) class Condition(\\_TimeoutGarbageCollector): def \\_\\_init\\_\\_(self) -&gt; None: super(Condition, self).\\_\\_init\\_\\_() self.io\\_loop &#x3D; ioloop.IOLoop.current() def \\_\\_repr\\_\\_(self) -&gt; str: result &#x3D; &quot;&lt;%s&quot; % (self.\\_\\_class\\_\\_.\\_\\_name\\_\\_,) if self.\\_waiters: result +&#x3D; &quot; waiters\\[%s\\]&quot; % len(self.\\_waiters) return result + &quot;&gt;&quot; def wait(self, timeout: Union\\[float, datetime.timedelta\\] &#x3D; None) -&gt; Awaitable\\[bool\\]: &quot;&quot;&quot;Wait for \\&#96;.notify\\&#96;. Returns a \\&#96;.Future\\&#96; that resolves \\&#96;\\&#96;True\\&#96;\\&#96; if the condition is notified, or \\&#96;\\&#96;False\\&#96;\\&#96; after a timeout. &quot;&quot;&quot; waiter &#x3D; Future() \\# type: Future\\[bool\\] self.\\_waiters.append(waiter) if timeout: def on\\_timeout() -&gt; None: if not waiter.done(): future\\_set\\_result\\_unless\\_cancelled(waiter, False) self.\\_garbage\\_collect() io\\_loop &#x3D; ioloop.IOLoop.current() timeout\\_handle &#x3D; io\\_loop.add\\_timeout(timeout, on\\_timeout) waiter.add\\_done\\_callback(lambda \\_: io\\_loop.remove\\_timeout(timeout\\_handle)) return waiter def notify(self, n: int &#x3D; 1) -&gt; None: &quot;&quot;&quot;Wake \\&#96;\\&#96;n\\&#96;\\&#96; waiters.&quot;&quot;&quot; waiters &#x3D; \\[\\] \\# Waiters we plan to run right now. while n and self.\\_waiters: waiter &#x3D; self.\\_waiters.popleft() if not waiter.done(): \\# Might have timed out. n -&#x3D; 1 waiters.append(waiter) for waiter in waiters: future\\_set\\_result\\_unless\\_cancelled(waiter, True) def notify\\_all(self) -&gt; None: &quot;&quot;&quot;Wake all waiters.&quot;&quot;&quot; self.notify(len(self.\\_waiters)) condition使用了_TimeoutGarbageCollector基类,在_TimeoutGarbageCollector中有一个用来存放future对象的self._waiters = collections.deque() # type: Deque[Future]队列,deque是一个双向队列,可以当队列来用,也可以当栈来使用.在conditoin中有一个wait函数,它的作用是等待一个通知,如果condition类被通知,则wait将会返回一个future对象,返回true.当condition.wait()被调用时,将会在condition类中_witer中存放进这个waiter,他是一个future对象.如果超时,IOLoop线程执行add_timeout,添加一个超时回调,请注意，从其他线程调用add_timeout是不安全的. 相反，您必须使用add_callback将控制权转移到IOLoop的线程，然后从那里调用add_timeout . waiter在完成时,可以执行一些回调,在这里执行一个lambda表达式,删除超时任务.on_timeout是一个闭包,当超时时间达到之后,如果waiter还没有set_result,则被添加进入_timeout中. notify用来进行通知,self._waiters.popleft()从左侧出队, 再来看messagebuffer中的get_message_since: 12345678910111213def get\\_messages\\_since(self, cursor): &quot;&quot;&quot;Returns a list of messages newer than the given cursor. \\&#96;\\&#96;cursor\\&#96;\\&#96; should be the \\&#96;\\&#96;id\\&#96;\\&#96; of the last message received. &quot;&quot;&quot; results &#x3D; \\[\\] for msg in reversed(self.cache): if msg\\[&quot;id&quot;\\] &#x3D;&#x3D; cursor: break results.append(msg) results.reverse() return results 返回一个消息列表.而add_message,在cache中补充新消息,同时进行notify_all.即把消息通知各所有的waiter 12345def add\\_message(self, message): self.cache.append(message) if len(self.cache) &gt; self.cache\\_size: self.cache &#x3D; self.cache\\[-self.cache\\_size :\\] self.cond.notify\\_all() 在发送一条新消息的处理函数中: 123456789101112131415class MessageNewHandler(tornado.web.RequestHandler): &quot;&quot;&quot;Post a new message to the chat room.&quot;&quot;&quot; def post(self): message &#x3D; &#123;&quot;id&quot;: str(uuid.uuid4()), &quot;body&quot;: self.get\\_argument(&quot;body&quot;)&#125; \\# render\\_string() returns a byte string, which is not supported \\# in json, so we must convert it to a character string. message\\[&quot;html&quot;\\] &#x3D; tornado.escape.to\\_unicode( self.render\\_string(&quot;message.html&quot;, message&#x3D;message) ) if self.get\\_argument(&quot;next&quot;, None): self.redirect(self.get\\_argument(&quot;next&quot;)) else: self.write(message) global\\_message\\_buffer.add\\_message(message) 有global_message_buffer.add_message(message)即将消息进行notify_all. 前端长轮询,tornado对应的处理函数如下,是整个demo的关键: 123456789101112131415161718192021222324class MessageUpdatesHandler(tornado.web.RequestHandler): &quot;&quot;&quot;Long-polling request for new messages. Waits until new messages are available before returning anything. &quot;&quot;&quot; async def post(self): cursor &#x3D; self.get\\_argument(&quot;cursor&quot;, None) messages &#x3D; global\\_message\\_buffer.get\\_messages\\_since(cursor) while not messages: \\# Save the Future returned here so we can cancel it in \\# on\\_connection\\_close. self.wait\\_future &#x3D; global\\_message\\_buffer.cond.wait() try: await self.wait\\_future except asyncio.CancelledError: return messages &#x3D; global\\_message\\_buffer.get\\_messages\\_since(cursor) if self.request.connection.stream.closed(): return self.write(dict(messages&#x3D;messages)) def on\\_connection\\_close(self): self.wait\\_future.cancel() 当请求到达之后,先查看cache中是否有未读的消息,如果有的话,只要连接还没有断开,就发送出去.如果没有,就hold住该请求,进入while.await self.wait_future,到这里异步处理完成,该请求挂在这里,等待self.wait_future产生结果,而不影响其他连接的生产,即不会发生阻塞.只有当有新消息达到之后,调用MessageNewHandler,执行了global_message_buffer.add_message(message),waiter才会产生set_result,产生返回.","categories":[],"tags":[{"name":"tornado","slug":"tornado","permalink":"https://rebiocoder.github.io/tags/tornado/"},{"name":"学习","slug":"学习","permalink":"https://rebiocoder.github.io/tags/%E5%AD%A6%E4%B9%A0/"}]}],"categories":[{"name":"架构设计","slug":"架构设计","permalink":"https://rebiocoder.github.io/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"},{"name":"操作系统","slug":"操作系统","permalink":"https://rebiocoder.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"tornado","slug":"tornado","permalink":"https://rebiocoder.github.io/tags/tornado/"},{"name":"unix","slug":"unix","permalink":"https://rebiocoder.github.io/tags/unix/"},{"name":"机器学习","slug":"机器学习","permalink":"https://rebiocoder.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"算法","slug":"算法","permalink":"https://rebiocoder.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"python","slug":"python","permalink":"https://rebiocoder.github.io/tags/python/"},{"name":"日常生活","slug":"日常生活","permalink":"https://rebiocoder.github.io/tags/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB/"},{"name":"学习","slug":"学习","permalink":"https://rebiocoder.github.io/tags/%E5%AD%A6%E4%B9%A0/"}]}